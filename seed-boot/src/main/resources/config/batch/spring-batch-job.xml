<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">
    <bean id="writer101" class="com.jadyer.seed.controller.batch.xmlconfig.Writer101"/>
    <bean id="writer202" class="com.jadyer.seed.controller.batch.xmlconfig.Writer202"/>
    <bean id="writer400" class="com.jadyer.seed.controller.batch.xmlconfig.Writer400"/>
    <bean id="writerVoid" class="com.jadyer.seed.controller.batch.xmlconfig.WriterVoid"/>
    <bean id="processor101" class="com.jadyer.seed.controller.batch.xmlconfig.Processor101"/>
    <bean id="processor201" class="com.jadyer.seed.controller.batch.xmlconfig.Processor201"/>
    <bean id="processor202" class="com.jadyer.seed.controller.batch.xmlconfig.Processor202"/>
    <bean id="processor203" class="com.jadyer.seed.controller.batch.xmlconfig.Processor203"/>

    <batch:job id="xmlSettleJob" parent="parentJob">
        <!-- Step101：读取本地文件内容，处理后，落库 -->
        <batch:step id="step101" next="step102" parent="parentStep">
            <batch:tasklet>
                <batch:chunk commit-interval="2" reader="reader101" processor="processor101" writer="writer101"/>
            </batch:tasklet>
        </batch:step>
        <!-- Step102：读取本地多个文件内容，处理后，合并成一个文件输出到本地 -->
        <batch:step id="step102" next="splitFlow200" parent="parentStep">
            <batch:tasklet>
                <batch:chunk commit-interval="1" reader="reader102" writer="writer102"/>
            </batch:tasklet>
        </batch:step>
        <!-- 并行的Step：201与202顺序执行，同时它们与203并行执行（注：必须配置task-executor，否则仍会串行） -->
        <batch:split id="splitFlow200" next="step301" task-executor="threadPoolTaskExecutor">
            <batch:flow>
                <!-- 读取数据库内容，处理后，落库 -->
                <batch:step id="step201" next="step202" parent="parentStep">
                    <batch:tasklet>
                        <batch:chunk commit-interval="2" reader="reader201" processor="processor201" writer="writer101"/>
                    </batch:tasklet>
                </batch:step>
                <!-- 读取数据库内容，处理后，打印出来 -->
                <batch:step id="step202" parent="parentStep">
                    <batch:tasklet>
                        <batch:chunk commit-interval="2" reader="reader201" processor="processor202" writer="writer202"/>
                    </batch:tasklet>
                </batch:step>
            </batch:flow>
            <batch:flow>
                <!-- 读取数据库内容，处理后，啥都不做 -->
                <batch:step id="step203" parent="parentStep">
                    <batch:tasklet>
                        <!--
                        虽然ItemReader逻辑相同，但这里不能使用reader201，这是由于201和203是并行执行的，而一个ItemReader是不能被同时使用的
                        否则会报告：org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
                        Caused by: java.lang.IllegalStateException: Cannot open an already opened ItemReader, call close first -->
                        <batch:chunk commit-interval="2" reader="reader203" processor="processor203" writer="writerVoid"/>
                    </batch:tasklet>
                </batch:step>
            </batch:flow>
        </batch:split>
        <!-- Step301：读取数据库内容，处理后，输出到本地文件 -->
        <batch:step id="step301" next="step400" parent="parentStep">
            <batch:tasklet>
                <bean class="com.jadyer.seed.controller.batch.xmlconfig.Tasklet301"/>
            </batch:tasklet>
        </batch:step>
        <!-- Step400：读取数据库内容，处理后，落库 -->
        <batch:step id="step400" parent="parentStep">
            <batch:tasklet>
                <batch:chunk commit-interval="2" reader="reader201" processor="processor400" writer="writer400"/>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id="processor400" class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <bean class="com.jadyer.seed.controller.batch.xmlconfig.Processor401"/>
                <bean class="com.jadyer.seed.controller.batch.xmlconfig.Processor402"/>
                <bean class="com.jadyer.seed.controller.batch.xmlconfig.Processor403"/>
                <!--
                <bean class="com.jadyer.seed.controller.batch.xmlconfig.Processor404"/>
                -->
            </list>
        </property>
    </bean>

    <!--
    scope="step"表示告诉Spring加载配置信息时不用创建该Bean，等到生成Step时再初始化（此时jobParameters才传过来）
    这就是所谓的SpringBatch的后绑定技术，对应到JavaConfig中的注解就是@StepScope
    注：该功能还依赖配置<bean class="org.springframework.batch.core.scope.StepScope">，详见spring-batch.xml
    -->
    <bean id="reader101" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <!--<property name="resource" value="file:/data/seedboot-batch.txt"/>-->
        <property name="resource" value="file:#{jobParameters['filePath']}"/>
        <property name="strict" value="false"/>
        <property name="linesToSkip" value="1"/>
        <property name="encoding" value="UTF-8"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="delimiter" value="|"/>
                        <property name="names" value="realName, age, birthDay"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="targetType" value="com.jadyer.seed.controller.batch.model.Person"/>
                        <!-- 如果实体中接收属性是java.util.Date（即文件中有日期类型的属性），则要注册日期解析器 -->
                        <!-- 注：若文件中有多个日期类型属性，且彼此格式不同，那么即便这里把格式都注册进去，也是没用的，它只认一个 -->
                        <property name="customEditors">
                            <map>
                                <entry key="java.util.Date" value-ref="customDateEditor"/>
                            </map>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="reader102" class="com.jadyer.seed.controller.batch.xmlconfig.SeedMultiResourceItemReader">
        <!--
        <property name="resources" value="file:/data/seedboot-batch-2-*.txt"/>
        <property name="resourcesLocationPattern" value="file:/data/seedboot-batch-2-*.txt"/>
        -->
        <property name="resourcesLocationPattern" value="file:/Develop/Code/xuanyu/seed/seed-boot/src/main/java/com/jadyer/seed/controller/batch/model/seedboot-batch-2-*.txt"/>
        <property name="delegate">
            <bean class="org.springframework.batch.item.file.FlatFileItemReader">
                <property name="linesToSkip" value="1"/>
                <property name="encoding" value="UTF-8"/>
                <property name="lineMapper">
                    <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                        <property name="lineTokenizer">
                            <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                                <property name="delimiter" value="|"/>
                                <property name="names" value="realName, age, birthDay"/>
                            </bean>
                        </property>
                        <property name="fieldSetMapper">
                            <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                                <property name="targetType" value="com.jadyer.seed.controller.batch.model.Person"/>
                                <property name="customEditors">
                                    <map>
                                        <entry key="java.util.Date" value-ref="customDateEditor"/>
                                    </map>
                                </property>
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <!--
    <bean id="writer102" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </property>
        <property name="sql" value="INSERT INTO t_person(real_name, age, birth_day) VALUES(:realName, :age, :birthDay)"/>
    </bean>
    -->
    <bean id="writer102" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="file:#{jobParameters['filePath']}all"/>
        <property name="appendAllowed" value="false"/>
        <!--
        <property name="shouldDeleteIfEmpty" value="true"/>
        <property name="shouldDeleteIfExists" value="true"/>
        -->
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value=","/>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="realName, age, birthDay"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="reader201" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step">
        <property name="dataSource" ref="dataSource"/>
        <property name="fetchSize" value="10"/>
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
                <property name="dataSource" ref="dataSource"/>
                <property name="selectClause" value="SELECT *"/>
                <property name="fromClause" value="FROM t_person"/>
                <property name="whereClause" value="WHERE DATEDIFF(:birthDay, birth_day)=0"/>
                <property name="sortKey" value="id"/>
            </bean>
        </property>
        <!-- 注意：这种动态传参是通过jobParameters，那么需要配置scope="step" -->
        <property name="parameterValues">
            <map>
                <entry key="birthDay" value="#{jobParameters['birthDay']}"/>
            </map>
        </property>
        <property name="rowMapper">
            <bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
                <property name="mappedClass" value="com.jadyer.seed.controller.batch.model.Person"/>
            </bean>
        </property>
    </bean>

    <bean id="reader203" class="org.springframework.batch.item.database.JdbcPagingItemReader">
        <property name="dataSource" ref="dataSource"/>
        <property name="fetchSize" value="10"/>
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
                <property name="dataSource" ref="dataSource"/>
                <property name="selectClause" value="SELECT *"/>
                <property name="fromClause" value="FROM t_person"/>
                <property name="sortKey" value="id"/>
            </bean>
        </property>
        <property name="rowMapper">
            <bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
                <property name="mappedClass" value="com.jadyer.seed.controller.batch.model.Person"/>
            </bean>
        </property>
    </bean>
</beans>